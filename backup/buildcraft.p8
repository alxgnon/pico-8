pico-8 cartridge // http://www.pico-8.com
version 18
__lua__
-- buildcraft
-- work in progress

-- todo -----------------------

-- miner:
-- + build miner on minerals

-- forge:
-- + proximity smelt
-- + build forge on coal
-->8
-- init
function _init()
	palt(0,false)
	mouse=mouse_init()
	drill=drill_init(7,3)
	bank=bank_init()
	build=build_init()
end

-- update
function _update()
	mouse_update(mouse)
	bank_update(bank)
	if(drill)drill_update(drill)
	build_update(build)
	if(tt)tooltip_update()
end

-- tooltip update
function tooltip_update()
	tt+=1
	if tt>=55 then
		tt=nil
		tooltip=nil
	end
end

-- draw
function _draw()
	cls()
	rectfill(0,0,128,32,1)
	map(0,0,0,0,16,16)
	if(drill)drill_draw(drill)
	build_draw(build)
	bank_draw(bank)
	tooltip_draw()
	pset(mouse.x,mouse.y,7)
end

-- tooltip draw
function tooltip_draw()
	rectfill(0,119,128,128,0)
	if tooltip and tt and tt<55 then
		print(tooltip,2,121,6)
	end
end
-->8
-- mouse init
function mouse_init()
	poke(24365,1)
	return{brush=0}
end

-- mouse update
function mouse_update(a)
	local click=mouse_controller(a)
	local tx,ty,tile=mouse_target(a)
	if click>0 and a.up then
		mouse_action(a,tx,ty,tile)
	elseif a.tx!=tx or a.ty!=ty then
		if map_tooltip(tile) then
			tooltip=desc[tile]
			tt=0
		else
			bank_tooltip(a)
		end
		a.tx,a.ty=tx,ty
	end
	a.up=click==0
end

-- map tooltip
function map_tooltip(tile)
	return(
		tile>0 and
		desc[tile] and
		(not tooltip or
		sub(tooltip,1,1)!="+")
	)
end

-- bank tooltip
function bank_tooltip(a)
	local tx=0
	for i=1,#items do
		local item=items[i]
		if bank[item] and bank[item]>0 then
			if a.x>=tx and a.x<=tx+18 and
				a.y>=0 and a.y<=9 then
					tooltip=desc[item]
					tt=0
					break
			end
			tx+=24
		end
	end
end

-- mouse controller
function mouse_controller(a)
	a.x,a.y=stat(32),stat(33)
	return stat(34)
end

-- mouse target
function mouse_target(a)
	local tx,ty,tile
	tx=min(max(flr(a.x/8),0),15)
	ty=min(max(flr(a.y/8),0),15)
	tile=mget(tx,ty)
	return tx,ty,tile
end

-- mouse action
function mouse_action(a,tx,ty,tile)
	if fget(tile,1) and ty>2 then
		if a.brush==1 then
			drill=drill_init(tx,ty)
		elseif tile==1 then
			drill=nil
		elseif a.brush>=32 and a.brush<=34 then
				add(build.forges,drill_init(tx,ty))
		elseif tile>=32 and tile<=34 then
			for b in all(build.forges) do
				if b.x==tx and b.y==ty then
					del(build.forges,b)
				end
			end
		end
		mset(tx,ty,a.brush)
		a.brush=tile
	end
end
-->8
-- drill init
function drill_init(x,y)
	mset(x,y,1)
	return{
		x=x,
		y=y,
		dx=0,
		dy=0,
		f=1,
		h=false,
		v=false
	}
end

-- drill update
function drill_update(a)
	local dx,dy=drill_controller(a)
	if (dx!=0 or dy!=0) and a.y+dy>2 then
		local tx,ty,tile=drill_target(a,dx,dy)
		drill_action(a,dx,dy,tx,ty,tile)
	else
		a.moving,a.mining=nil,nil
	end
end

-- drill controller
function	drill_controller(a)
	local dx,dy=0,0
	if(btn(0))dx-=1
	if(btn(1))dx+=1
	if(btn(2))dy-=1
	if(btn(3))dy+=1
	if a.dx==0 and dx!=0 then
		dy=0
	elseif a.dy==0 and dy!=0 then
		dx=0
	end
	a.dx,a.dy=dx,dy
	return dx,dy
end

-- drill target
function drill_target(a,dx,dy)
	local tx,ty,tile
	tx=min(max(flr(a.x+dx),0),15)
	ty=min(max(flr(a.y+dy),0),15)
	tile=mget(tx,ty)
	return tx,ty,tile
end

-- drill action
function drill_action(a,dx,dy,tx,ty,tile)
	if(a.moving)a.moving+=1
	if(a.mining)a.mining+=1
	if(a.harvesting)a.harvesting+=1
	if tile==0 then
		drill_movement(a,tx,ty,tile)
	elseif fget(tile,0) then
		drill_mining(a,tx,ty,tile)
	elseif fget(tile,1) and tile!=1 then
		drill_pickup(a,tx,ty,tile)
	elseif fget(tile,2) then
		drill_harvest(a,dx,dy,tx,ty,tile)
	end
end

-- drill movement
function drill_movement(a,tx,ty,tile)
	if a.mining or a.harvesting and tile==0 then
		a.mining=nil
		a.harvesting=nil
		a.moving=0
	end
	if not a.moving or a.moving>3 then
		mset(a.x,a.y,0)
		mset(tx,ty,1)
		a.x,a.y=tx,ty
		a.moving=0
	end
end

-- drill mining
function drill_mining(a,tx,ty,tile)
	a.moving=nil
	a.harvesting=nil
	if not a.mining then
		a.mining=0
	elseif a.mining>5 then
		mset(a.x,a.y,0)
		mset(tx,ty,1)
		a.x,a.y=tx,ty
		a.mining=0
	end
end

-- drill pickup
function drill_pickup(a,tx,ty,tile)
	a.mining=nil
	a.harvesting=nil
	if not a.moving then
		a.moving=0
	elseif a.moving>5 then
		local bonus=1
		if(tile>=32 and tile<=34)tile,bonus=10,5
		if(not bank[tile])bank[tile]=0
		bank[tile]+=bonus
		tooltip="+"..bonus.." "..desc[tile]
		tt=0
		mset(a.x,a.y,0)
		mset(tx,ty,1)
		a.x,a.y=tx,ty
		a.moving=0
	end
end

-- drill harvest
function drill_harvest(a,dx,dy,tx,ty,tile)
	a.moving=nil
	a.mining=nil
	if not a.harvesting then
		a.harvesting=0
		return
	elseif a.harvesting<10 then
		return
	end
	local pushing=true
	while pushing do
		local outtile=mget(a.x-dx,a.y-dy)
		if outtile==8 and tile==12 then
				mset(a.x-dx,a.y-dy,10)
				dx,dy,pushing=drill_next(a,dx,dy)
		elseif outtile==tile-1 or outtile==10 then
			dx,dy,pushing=drill_next(a,dx,dy)
		elseif outtile==0 then
			mset(a.x-dx,a.y-dy,tile-1)
			a.harvesting=0
			pushing=false
		else
			pushing=false
		end
	end
end

-- drill next
function drill_next(a,dx,dy)
	if(dx!=0)dx+=sgn(dx)
	if(dy!=0)dy+=sgn(dy)
	if a.x-dx<1 or a.x-dx>14 or
		a.y-dy<3 or a.y-dy>14 then
			return dx,dy,false
	end
	return dx,dy,true
end

-- drill draw
function drill_draw(a)
	if(a.dx<0)a.f,a.h,a.v=2,true,false
	if(a.dx>0)a.f,a.h,a.v=2,false,false
	if(a.dy<0)a.f,a.h,a.v=1,false,true
	if(a.dy>0)a.f,a.h,a.v=1,false,false
	spr(a.f,a.x*8,a.y*8,1,1,a.h,a.v)
end
-->8
-- bank init
function bank_init()
	return{}
end

-- bank update
function bank_update(a)
	if a[8] and a[8]>0 and
		a[11] and a[11]>0 and
		#build.forges>0 then
			local forge=build.forges[1]
			local sx,sy=forge.x,forge.y
			mset(sx,sy,(mget(sx,sy)-31)%3+32)
			if(a.smelting)a.smelting+=1
			if not a.smelting then
				a.smelting=0
			elseif a.smelting>30 and
				a[8] and a[8]>0 and
				a[11] and a[11]>0 then
					a[8]-=1
					a[11]-=1
					if(not a[10])a[10]=0
					a[10]+=1
					a.smelting=nil
			end
	end
end

-- bank draw
function bank_draw(a)
	rectfill(0,0,128,9,0)
	local bx=0
	for i=1,#items do
		local item=items[i]
		if a[item] and a[item]>0 then
			spr(item,bx,0)
			print(a[item],bx+9,2,6)
			bx+=24
		end
	end
end
-->8
-- build init
function build_init()
	return{
		miners={
			--miner_init(10,7,-1,0),
			--miner_init(10,8,-1,0),
			--miner_init(4,13,0,-1)
		},
		forges={}--forge_init(4,7)}
	}
end

-- build update
function build_update(a)
	for b in all(a.miners) do
		miner_update(b)
	end
	for b in all(a.forges) do
		forge_update(b)
	end
end

-- build draw
function build_draw(a)
	for b in all(a.miners) do
		miner_draw(b)
	end
	for b in all(a.forges) do
		forge_draw(b)
	end
end

-- miner init
function miner_init(x,y,dx,dy)
	local f0
	if mget(x,y)==12 then
		f0=48
	else
		f0=16
	end
	mset(x,y,f0)
	return{
		x=x,
		y=y,
		dx=dx,
		dy=dy,
		f0=f0,
		f=0
	}
end

-- miner update
function miner_update(a)
	if a.harvesting then
		mset(a.x,a.y,a.f0+flr(a.f/4))
		a.f=(a.f+1)%12
	end
	local tile
	if a.f0==48 then
		tile=12
	else
		tile=9
	end
	miner_harvest(a,a.dx,a.dy,a.x,a.y,tile)
end

-- miner harvest
function miner_harvest(a,dx,dy,tx,ty,tile)
	if not a.harvesting or
		a.harvesting<8 then
			if(not a.harvesting)a.harvesting=-1
			a.harvesting+=1
			return
	end
	local pushing=true
	while pushing do
		local outtile=mget(a.x+dx,a.y+dy)
		if outtile==tile-1 then
			dx,dy,pushing=miner_next(a,dx,dy)
		elseif outtile==0 then
			mset(a.x+dx,a.y+dy,tile-1)
			a.harvesting=0
			pushing=false
		else
			a.harvesting=nil
			pushing=false
		end
	end
end

-- miner next
function miner_next(a,dx,dy)
	if(dx!=0)dx+=sgn(dx)
	if(dy!=0)dy+=sgn(dy)
	if a.x+dx<1 or a.x+dx>14 or
		a.y+dy<3 or a.y+dy>14 then
			return dx,dy,false
	end
	return dx,dy,true
end

-- miner draw
function miner_draw(a)
end

-- forge init
function forge_init(x,y)
	mset(x,y,32)
	return{x=x,y=y}
end

-- forge update
function forge_update(a)
	local me=mget(a.x,a.y)
	if me<32 or me>34 then
		del(build.forges,a)
	end
	if(a.smelting)a.smelting+=1
	if not a.smelting then
		a.smelting=0
		return
	elseif a.smelting<30 then
		return
	end
	local t1,t2,t3,t4
	t1=mget(a.x-1,a.y)
	t2=mget(a.x+1,a.y)
	t3=mget(a.x,a.y-1)
	t4=mget(a.x,a.y+1)
	local coppers=
		(t1==8 and 1 or 0) +
		(t2==8 and 1 or 0) +
		(t3==8 and 1 or 0) +
		(t4==8 and 1 or 0)
	local coals=
		(t1==11 and 1 or 0) +
		(t2==11 and 1 or 0) +
		(t3==11 and 1 or 0) +
		(t4==11 and 1 or 0)
	if coppers>0 and coals>0 then
		mset(a.x,a.y,(mget(a.x,a.y)-31)%3+32)
		mset(a.x-1,a.y,0)
		mset(a.x+1,a.y,0)
		mset(a.x,a.y-1,0)
		mset(a.x,a.y+1,0)
		if(not bank[10])bank[10]=0
		bank[10]+=coppers
		a.smelting=nil
	end
end

-- forge draw
function forge_draw(a)
end
-->8
-- items
items={10,8,11}

-- desc
desc={
	[1]="drill",
	[8]="copper",
	[10]="alloy",
	[11]="power crystal",
	[16]="extractor",
	[32]="forge"
}

-- drill
desc[2]=desc[1]
-- copper
desc[9]=desc[8]
-- power crystal
desc[12]=desc[11]
-- extractor
desc[17]=desc[16]
desc[18]=desc[16]
-- forge
desc[33]=desc[32]
desc[34]=desc[32]
__gfx__
000000000aa0aa000aa0900000000000444444404444444044444440444444400000000000000000000000000000000000000000000000000000000000000000
00000000aa000aa0aaa009004444444044242440444422404422424042244440000aa000000aa0000aaaaaa00000b000000bb000000000000000000000000000
00700700aaaaaaa0a0a000904444444044422240444224404442224042224440000aaa0000aaaa000999999000b0bb0000bbbb00000000000000000000000000
000770000000000000a0c00944444440444242204422444044424220424224200900a000099aaa90044444400cc000000ccbbbc0000000000000000000000000
00077000900c0090a0a00090444444404422442042242440422444204444222004900090049999900aaaaaa00000ccc00dccccc0000000000000000000000000
0070070009000900aaa00900222222204224444042442240422444404444224004400940044999400999999000dccc0000dccc00000000000000000000000000
00000000009090000aa090002222222042444440444442204422444044222440000044000044440004444440000dd000000dd000000000000000000000000000
00000000000900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
aa0aa0a00aa0aa00a0aa0aa000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000090a0a90099a0a990990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
a9000000a90000a0090009a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
a00c00a0000a0000a00c00a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000009a0a00009a0a900090000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
a0900000a99009a0099099a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
a0aa0aa00aa0aa00aa0aa0a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
99999990999999909999999000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
90000090900000909000009000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
90ccc09090aaa09090ccc09000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
90000090900000909000009000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
a0ccc0a0a0ccc0a0a0aaa0a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
a00000a0a00000a0a00000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
aaaaaaa0aaaaaaa0aaaaaaa000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44444440444444404444444000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
b0bb0bb00bb0bb00bb0bb0b00000000000000000000000000000000000000000000000000000000000000000999999909a0c0a90999999909999999000000000
b0c00000bcc00cb00cc0ccb00000000000000000000000000000000000000000000000000000000099999999909990909a0c0a90900000009999999000000000
00000cb0b0000cb0bc000c000000000000000000000000000000000000000000000000000000000009090909999999909a0c0a9090c0c0c09900009000000000
b00d00b0000d0000b00d00b00000000000000000000000000000000000000000000000000000000000000000999999909a0c0a9090000000990cc09000000000
bc000000bc0000b00c000cb00000000000000000000000000000000000000000000000000000000090909090999999909a0c0a9090c0c0c0990cc09000000000
0000c0b0bc00ccb0bcc0cc000000000000000000000000000000000000000000000000000000000099999999909990909a0c0a90900000000000000000000000
bb0bb0b00bb0bb00b0bb0bb00000000000000000000000000000000000000000000000000000000000000000999999909a0c0a9090c0c0c0aaaaaaa000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000
__gff__
0202020101010101020402020400000000000000000000000000000000000000020202000000000000000000000000000000000000000000000002020202020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0303030303030303030303030303030300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
040707070706060707090700070c040400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0606060607070607070707050407040400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0604040705060606070707070706040400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0604070707040704040406070406050400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0507060604060707070406060707070400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0607040706060606060407070707070400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0506070707060606060707040704040400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0406060707070707070404070704070700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0506050707070607060607060707070400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0404040607070606070404070704070400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0404070404040707070707040404040400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
